rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isValidEmail(email) {
      return email.matches('.*@.*\\..*');
    }

    // ============================================
    // CASINO MODULE SECURITY FUNCTIONS
    // Added: Phase 1.4 - Engineering Overhaul
    // ============================================

    // Validate coin increment (anti-cheat)
    function validateCoins(newCoins, oldCoins) {
      let increment = newCoins - oldCoins;
      return newCoins >= 0 && increment <= 5000;
    }

    // Validate XP increment (anti-cheat)
    function validateXP(newXP, oldXP) {
      let increment = newXP - oldXP;
      return newXP >= 0 && increment <= 2000;
    }

    // Validate level increment (anti-cheat)
    function validateLevel(newLevel, oldLevel) {
      let increment = newLevel - oldLevel;
      return newLevel >= 1 && increment <= 1;
    }

    // Validate streak value
    function validateStreak(streak) {
      return streak >= 0 && streak <= 1000;
    }

    // Users collection
    match /users/{userId} {
      // Users can read their own data
      allow read: if isOwner(userId);

      // Users can create their own profile
      allow create: if isOwner(userId)
                    && request.resource.data.email is string
                    && isValidEmail(request.resource.data.email);

      // Users can update their own profile
      allow update: if isOwner(userId)
                    && (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['uid', 'createdAt']));

      // Users cannot delete their profile (handle via auth deletion)
      allow delete: if false;

      // Subcollections for user data
      match /sessions/{sessionId} {
        allow read, write: if isOwner(userId);
      }

      match /essays/{essayId} {
        allow read, write: if isOwner(userId);
      }

      match /documents/{documentId} {
        allow read, write: if isOwner(userId);
      }

      // Casino Progress (with anti-cheat validation)
      match /casinoProgress/{progressId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId)
                      && validateCoins(request.resource.data.coins, resource.data.coins)
                      && validateXP(request.resource.data.xp, resource.data.xp)
                      && validateLevel(request.resource.data.level, resource.data.level)
                      && validateStreak(request.resource.data.get('currentStreak', 0));
        allow delete: if false;
      }

      // Casino History (immutable audit log)
      match /casinoHistory/{eventId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update, delete: if false; // Immutable - no modifications allowed
      }
    }

    // Essays collection (top-level)
    match /essays/{essayId} {
      // Users can read their own essays
      allow read: if isAuthenticated()
                  && resource.data.userId == request.auth.uid;

      // Users can create essays for themselves
      allow create: if isAuthenticated()
                    && request.resource.data.userId == request.auth.uid;

      // Users can update their own essays
      allow update: if isAuthenticated()
                    && resource.data.userId == request.auth.uid;

      // Users can delete their own essays
      allow delete: if isAuthenticated()
                    && resource.data.userId == request.auth.uid;
    }

    // Applications collection
    match /applications/{applicationId} {
      // Users can read their own applications
      allow read: if isAuthenticated()
                  && resource.data.userId == request.auth.uid;

      // Users can create applications for themselves
      allow create: if isAuthenticated()
                    && request.resource.data.userId == request.auth.uid
                    && request.resource.data.schoolName is string
                    && request.resource.data.status in ['not-started', 'in-progress', 'submitted', 'completed'];

      // Users can update their own applications
      allow update: if isAuthenticated()
                    && resource.data.userId == request.auth.uid
                    && request.resource.data.userId == request.auth.uid;

      // Users can delete their own applications
      allow delete: if isAuthenticated()
                    && resource.data.userId == request.auth.uid;
    }

    // Chat sessions collection
    match /chatSessions/{sessionId} {
      // Users can read their own chat sessions
      allow read: if isAuthenticated()
                  && resource.data.userId == request.auth.uid;

      // Users can create chat sessions for themselves
      allow create: if isAuthenticated()
                    && request.resource.data.userId == request.auth.uid;

      // Users can update their own chat sessions
      allow update: if isAuthenticated()
                    && resource.data.userId == request.auth.uid;

      // Users can delete their own chat sessions
      allow delete: if isAuthenticated()
                    && resource.data.userId == request.auth.uid;

      // Chat messages subcollection
      match /messages/{messageId} {
        allow read, write: if isAuthenticated()
                           && get(/databases/$(database)/documents/chatSessions/$(sessionId)).data.userId == request.auth.uid;
      }
    }

    // Tasks collection
    match /tasks/{taskId} {
      allow read, write: if isAuthenticated()
                         && resource.data.userId == request.auth.uid;
    }

    // Test Prep data collection (case-insensitive support)
    match /testPrep/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }

    match /testprep/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }

    // Timeline tasks collection
    match /timelineTasks/{taskId} {
      allow read, update, delete: if isAuthenticated()
                                  && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated()
                    && request.resource.data.userId == request.auth.uid;
    }

    // Timeline preferences collection
    match /timelinePreferences/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }

    // Documents collection (for document management page)
    match /documents/{documentId} {
      allow read: if isAuthenticated()
                  && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated()
                    && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated()
                            && resource.data.userId == request.auth.uid;
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated()
                  && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated()
                            && resource.data.userId == request.auth.uid;
    }

    // Scholarship Applications collection
    match /scholarshipApplications/{applicationId} {
      allow read: if isAuthenticated()
                  && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated()
                    && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated()
                            && resource.data.userId == request.auth.uid;
    }

    // Chat History collection (for AI chat logs)
    match /chatHistory/{chatId} {
      allow read: if isAuthenticated()
                  && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated()
                    && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated()
                            && resource.data.userId == request.auth.uid;
    }

    // Essay Drafts collection (for essay coach backup)
    match /essay_drafts/{draftId} {
      allow read: if isAuthenticated()
                  && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated()
                    && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated()
                            && resource.data.userId == request.auth.uid;
    }

    // Essay Analyses collection (for essay coach backup)
    match /essay_analyses/{analysisId} {
      allow read: if isAuthenticated()
                  && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated()
                    && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated()
                            && resource.data.userId == request.auth.uid;
    }

    // Scholarships collection (read-only for all authenticated users)
    match /scholarships/{scholarshipId} {
      allow read: if isAuthenticated();
      allow write: if false; // Admin only (manage via Firebase Console)
    }

    // Schools/Colleges collection (read-only for all authenticated users)
    match /schools/{schoolId} {
      allow read: if isAuthenticated();
      allow write: if false; // Admin only
    }

    // Analytics collection (write-only for authenticated users)
    match /analytics/{documentId} {
      allow read: if false; // Admin only
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }

    // Feedback collection (write-only for authenticated users)
    match /feedback/{feedbackId} {
      allow read: if false; // Admin only
      allow create: if isAuthenticated()
                    && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }

    // Casino Leaderboards (read-only for users, Cloud Functions write only)
    match /leaderboards/{leaderboardType} {
      // Users can read leaderboard data
      allow read: if isAuthenticated();
      // Only Cloud Functions can write (via admin SDK)
      allow write: if false;

      // Individual leaderboard entries
      match /entries/{userId} {
        allow read: if isAuthenticated();
        allow write: if false; // Cloud Functions only
      }
    }

    // Block all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
